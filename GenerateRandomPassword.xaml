<Activity mc:Ignorable="sap sap2010" x:Class="Main" this:Main.MinLength="8" this:Main.MaxLength="8" this:Main.RequiredUpperCaseLetters="1" this:Main.RequiredLowerCaseLetters="0" this:Main.RequiredDigits="0" this:Main.AllowedSpecialChars="[&quot; !&quot;&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}&quot;]" this:Main.RequiredSpecialChars="1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="MinLength" Type="InArgument(x:Int32)" />
    <x:Property Name="MaxLength" Type="InArgument(x:Int32)" />
    <x:Property Name="RequiredUpperCaseLetters" Type="InArgument(x:Int32)" />
    <x:Property Name="RequiredLowerCaseLetters" Type="InArgument(x:Int32)" />
    <x:Property Name="Password" Type="OutArgument(x:String)" />
    <x:Property Name="RequiredDigits" Type="InArgument(x:Int32)" />
    <x:Property Name="AllowedSpecialChars" Type="InArgument(x:String)" />
    <x:Property Name="RequiredSpecialChars" Type="InArgument(x:Int32)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>956,2410</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Generate Password" sap:VirtualizedContainerService.HintSize="572,2345" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="test" />
      <Variable x:TypeArguments="x:String" Default="abcdefgijkmnopqrstwxyz" Name="lowerCaseLetters" />
      <Variable x:TypeArguments="x:String" Default="ABCDEFGHJKLMNPQRSTWXYZ" Name="upperCaseLetters" />
      <Variable x:TypeArguments="x:String" Default="0123456789" Name="numbers" />
      <Variable x:TypeArguments="s:Random" Name="randomGenerator" />
      <Variable x:TypeArguments="scg:List(x:Char)" Name="selectedChars" />
      <Variable x:TypeArguments="x:Int32" Name="totalLength" />
      <Variable x:TypeArguments="x:Int32" Name="counter" />
      <Variable x:TypeArguments="x:String" Name="allAvailableChars" />
      <Variable x:TypeArguments="s:Char[]" Name="passwordCharArray" />
      <Variable x:TypeArguments="scg:List(x:Int32)" Name="emptyLocations" />
      <Variable x:TypeArguments="x:Int32" Default="1000" Name="capSize" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence DisplayName="Input Validation" sap:VirtualizedContainerService.HintSize="510,81" sap2010:WorkflowViewState.IdRef="Sequence_11">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If Condition="[MinLength &gt; MaxLength]" DisplayName="If - MinLength &gt; MaxLength" sap:VirtualizedContainerService.HintSize="388,52" sap2010:WorkflowViewState.IdRef="If_1">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <Throw DisplayName="Throw - Invalid Min Length" Exception="[new ArgumentException(&quot;Minimum password length cannot be greater than maximum password length&quot;)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </If.Then>
        <If.Else>
          <Sequence DisplayName="" sap2010:WorkflowViewState.IdRef="Sequence_4" />
        </If.Else>
      </If>
      <If Condition="[New Int32() { MinLength, MaxLength, RequiredDigits, RequiredLowerCaseLetters, RequiredUpperCaseLetters, RequiredSpecialChars}.Any(Function(item) item &gt; CapSize)]" DisplayName="If - any Required Length &gt; CapSize" sap:VirtualizedContainerService.HintSize="388,52" sap2010:WorkflowViewState.IdRef="If_2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <Throw DisplayName="Throw - Invalid Length" Exception="[new ArgumentException(&quot;All character requirements have to be lower or equal to &quot; + CapSize.ToString)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_2" />
        </If.Then>
        <If.Else>
          <Sequence DisplayName="" sap2010:WorkflowViewState.IdRef="Sequence_5" />
        </If.Else>
      </If>
      <If Condition="[MinLength &lt; RequiredLowerCaseLetters + RequiredUpperCaseLetters + RequiredDigits + RequiredSpecialChars]" DisplayName="If - MinLength &lt; RequiredLength" sap:VirtualizedContainerService.HintSize="388,52" sap2010:WorkflowViewState.IdRef="If_3">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <Throw DisplayName="Throw - Invalid Min Length" Exception="[new ArgumentException(&quot;MinLength is lower than required length&quot;)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_3" />
        </If.Then>
        <If.Else>
          <Sequence DisplayName="" sap:VirtualizedContainerService.HintSize="300,80" sap2010:WorkflowViewState.IdRef="Sequence_6">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Sequence>
        </If.Else>
      </If>
    </Sequence>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim randomBytes as Byte()&#xD;&#xA;randomBytes = New Byte(4) {}&#xD;&#xA;&#xD;&#xA;Dim rngCrypto As System.Security.Cryptography.RandomNumberGenerator&#xD;&#xA;rngCrypto = System.Security.Cryptography.RandomNumberGenerator.Create()&#xD;&#xA;rngCrypto.GetBytes(randomBytes)&#xD;&#xA;randomGenerator = New Random(BitConverter.ToInt32(randomBytes,0))" DisplayName="Invoke code - init the randomGenerator" sap:VirtualizedContainerService.HintSize="510,165" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InOutArgument x:TypeArguments="s:Random" x:Key="randomGenerator">[randomGenerator]</InOutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <Assign DisplayName="Assign - allAvailableChars" sap:VirtualizedContainerService.HintSize="510,82" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[allAvailableChars]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[lowerCaseLetters + upperCaseLetters + numbers + AllowedSpecialChars]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - totalLength" sap:VirtualizedContainerService.HintSize="510,82" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[totalLength]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">[randomGenerator.Next(MinLength, MaxLength +1)]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - selectedChars" sap:VirtualizedContainerService.HintSize="510,82" sap2010:WorkflowViewState.IdRef="Assign_3">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:List(x:Char)">[selectedChars]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:List(x:Char)">[new List(Of Char)]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - counter = 0" sap:VirtualizedContainerService.HintSize="510,82" sap2010:WorkflowViewState.IdRef="Assign_4">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">0</InArgument>
      </Assign.Value>
    </Assign>
    <Sequence DisplayName="Select Characters" sap:VirtualizedContainerService.HintSize="510,81" sap2010:WorkflowViewState.IdRef="Sequence_12">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <While DisplayName="While - counter &lt; RequiredLowerCaseLetters" sap:VirtualizedContainerService.HintSize="542,416" sap2010:WorkflowViewState.IdRef="While_1">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <While.Condition>[counter &lt; RequiredLowerCaseLetters]</While.Condition>
        <Sequence sap:VirtualizedContainerService.HintSize="496,257" sap2010:WorkflowViewState.IdRef="Sequence_7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection - selectedChars + LowerCaseLetter" sap:VirtualizedContainerService.HintSize="434,25" sap2010:WorkflowViewState.IdRef="AddToCollection`1_1" Item="[lowerCaseLetters.ToCharArray()(randomGenerator.Next(lowerCaseLetters.Length))]" />
          <Assign DisplayName="Assign - counter++" sap:VirtualizedContainerService.HintSize="434,81" sap2010:WorkflowViewState.IdRef="Assign_5">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[counter + 1]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </While>
      <Assign DisplayName="Assign - counter = 0" sap:VirtualizedContainerService.HintSize="542,81" sap2010:WorkflowViewState.IdRef="Assign_6">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">0</InArgument>
        </Assign.Value>
      </Assign>
      <While DisplayName="While - counter &lt; RequiredUpperCaseLetters" sap:VirtualizedContainerService.HintSize="542,52" sap2010:WorkflowViewState.IdRef="While_2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <While.Condition>[counter &lt; RequiredUpperCaseLetters]</While.Condition>
        <Sequence sap:VirtualizedContainerService.HintSize="496,258" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection - selectedChars + UpperCaseLetter" sap:VirtualizedContainerService.HintSize="434,25" sap2010:WorkflowViewState.IdRef="AddToCollection`1_2" Item="[upperCaseLetters.ToCharArray()(randomGenerator.Next(upperCaseLetters.Length))]" />
          <Assign DisplayName="Assign - counter++" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_7">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[counter + 1]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </While>
      <Assign DisplayName="Assign - counter = 0" sap:VirtualizedContainerService.HintSize="542,81" sap2010:WorkflowViewState.IdRef="Assign_8">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">0</InArgument>
        </Assign.Value>
      </Assign>
      <While DisplayName="While - counter &lt; RequiredNumbers" sap:VirtualizedContainerService.HintSize="542,52" sap2010:WorkflowViewState.IdRef="While_3">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <While.Condition>[counter &lt; RequiredDigits]</While.Condition>
        <Sequence sap:VirtualizedContainerService.HintSize="496,258" sap2010:WorkflowViewState.IdRef="Sequence_9">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection - selectedChars + Number" sap:VirtualizedContainerService.HintSize="434,25" sap2010:WorkflowViewState.IdRef="AddToCollection`1_3" Item="[numbers.ToCharArray()(randomGenerator.Next(numbers.Length))]" />
          <Assign DisplayName="Assign - counter++" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_9">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[counter + 1]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </While>
      <Assign DisplayName="Assign - counter = 0" sap:VirtualizedContainerService.HintSize="542,81" sap2010:WorkflowViewState.IdRef="Assign_10">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">0</InArgument>
        </Assign.Value>
      </Assign>
      <While DisplayName="While - counter &lt; RequiredNonAlphaNumericChars" sap:VirtualizedContainerService.HintSize="542,416" sap2010:WorkflowViewState.IdRef="While_4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <While.Condition>[counter &lt; RequiredSpecialChars]</While.Condition>
        <Sequence sap:VirtualizedContainerService.HintSize="496,257" sap2010:WorkflowViewState.IdRef="Sequence_10">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection selectedChars + NonAlphaNumericChar" sap:VirtualizedContainerService.HintSize="434,25" sap2010:WorkflowViewState.IdRef="AddToCollection`1_4" Item="[AllowedSpecialChars.ToCharArray()(randomGenerator.Next(AllowedSpecialChars.Length))]" />
          <Assign DisplayName="Assign - counter++" sap:VirtualizedContainerService.HintSize="434,81" sap2010:WorkflowViewState.IdRef="Assign_11">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[counter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[counter + 1]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </While>
    </Sequence>
    <While DisplayName="While - selectedChars.Count &lt; totalLength" sap:VirtualizedContainerService.HintSize="510,220" sap2010:WorkflowViewState.IdRef="While_5">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <While.Condition>[selectedChars.Count &lt; totalLength]</While.Condition>
      <AddToCollection x:TypeArguments="x:Char" Collection="[selectedChars]" DisplayName="Add to collection - selectedChars + random char" sap:VirtualizedContainerService.HintSize="200,25" sap2010:WorkflowViewState.IdRef="AddToCollection`1_5" Item="[allAvailableChars.ToCharArray()(randomGenerator.Next(allAvailableChars.Length))]" />
    </While>
    <Assign DisplayName="Assign - passwordCharArray" sap:VirtualizedContainerService.HintSize="510,82" sap2010:WorkflowViewState.IdRef="Assign_12">
      <Assign.To>
        <OutArgument x:TypeArguments="s:Char[]">[passwordCharArray]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="s:Char[]">[new Char(totalLength - 1){}]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Assign - emptyLocations" sap:VirtualizedContainerService.HintSize="510,82" sap2010:WorkflowViewState.IdRef="Assign_13">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:List(x:Int32)">[emptyLocations]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:List(x:Int32)">[Enumerable.Range(0, totalLength).ToList]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:ForEach x:TypeArguments="x:Char" CurrentIndex="{x:Null}" DisplayName="For each - selectedChar" sap:VirtualizedContainerService.HintSize="510,543" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[selectedChars]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="x:Char">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="x:Char" Name="selectedChar" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="476,357" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:Int32" Name="index" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign - counter++" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_14">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[index]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[randomGenerator.Next(0, emptyLocations.Count - 1)]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign - passwordCharArray(emptyLocations(index))" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_15">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Char">[passwordCharArray(emptyLocations(index))]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Char">[selectedChar]</InArgument>
              </Assign.Value>
            </Assign>
            <RemoveFromCollection x:TypeArguments="x:Int32" Collection="[emptyLocations]" DisplayName="Remove from collection - EmptyLocations" sap:VirtualizedContainerService.HintSize="434,25" sap2010:WorkflowViewState.IdRef="RemoveFromCollection`1_1" Item="[emptyLocations(index)]" />
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
    <Assign DisplayName="Assign - Password" sap:VirtualizedContainerService.HintSize="510,82" sap2010:WorkflowViewState.IdRef="Assign_16">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[Password]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[String.Join("", passwordCharArray)]</InArgument>
      </Assign.Value>
    </Assign>
    <WriteLine DisplayName="Write line" sap:VirtualizedContainerService.HintSize="510,90" sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="[Password.ToString]" />
  </Sequence>
</Activity>